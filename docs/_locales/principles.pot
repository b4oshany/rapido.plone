# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Makina Corpus
# This file is distributed under the same license as the Rapido package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Rapido 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-16 08:32-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../principles.rst:2
msgid "Principles"
msgstr ""

#: ../principles.rst:5
msgid "Creating a Rapido app"
msgstr ""

#: ../principles.rst:7
msgid "Here are the basic steps to create a Rapido app:"
msgstr ""

#: ../principles.rst:9
msgid "go to the theme folder (in Plone setup / Theme if we prefer to work inline, or, if your prefer to work in the filesystem, it might be either in the ``static`` folder in your theme package, or in the ``resources`` folder in your Plone install if you do not have a custom package),"
msgstr ""

#: ../principles.rst:10
msgid "add a new folder named ``rapido``,"
msgstr ""

#: ../principles.rst:11
msgid "in ``rapido``, add a new folder named ``myapp``."
msgstr ""

#: ../principles.rst:13
msgid "That's it."
msgstr ""

#: ../principles.rst:15
msgid "Now, we can implement our application in this folder. Here is a typical layout for a rapido app::"
msgstr ""

#: ../principles.rst:31
msgid "``settings.yaml`` is not mandatory, but it allows defining access rights if needed."
msgstr ""

#: ../principles.rst:35
msgid "A Rapido application can also be located in a non-active theme (see :doc:`./reference/application`)"
msgstr ""

#: ../principles.rst:37
msgid "The app components are ``blocks``. A block is defined by a set of 3 files (HTML, Python, and YAML) located in the ``blocks`` folder."
msgstr ""

#: ../principles.rst:40
msgid "The **YAML file** defines the elements. An element is any dynamically generated element in a block: it can be a form field (input, select, etc.), but also a button (``ACTION``), or even just a piece of generated HTML (``BASIC``)."
msgstr ""

#: ../principles.rst:44
msgid "The **HTML file** contains the layout of the block. The templating mechanism is super simple, elements are just enclosed in brackets, like this: ``{my_element}``."
msgstr ""

#: ../principles.rst:48
msgid "The **Python file** contains the application logic. It is a set of functions, each named for the element or the event it corresponds to."
msgstr ""

#: ../principles.rst:51
msgid "For a ``BASIC`` element, for instance, we need to provide a function with the same name as the element; its return-value replaces the element in the block."
msgstr ""

#: ../principles.rst:55
msgid "For an ``ACTION``, we are supposed to provide a function with the same name as the element; in this case, it will be *executed* when a user clicks on the action button."
msgstr ""

#: ../principles.rst:59
msgid "Here is a basic example:"
msgstr ""

#: ../principles.rst:61
msgid "``rapido/myapp/blocks/simpleblock.yaml``:"
msgstr ""

#: ../principles.rst:71
msgid "``rapido/myapp/blocks/simpleblock.html``:"
msgstr ""

#: ../principles.rst:78
msgid "``rapido/myapp/blocks/simpleblock.py``:"
msgstr ""

#: ../principles.rst:88
msgid "We can see our block by visiting the following URL::"
msgstr ""

#: ../principles.rst:92
msgid "It works fine, but where is our Plone site now??"
msgstr ""

#: ../principles.rst:95
msgid "Inserting our block in a Plone page"
msgstr ""

#: ../principles.rst:97
msgid "To put our block somewhere in the Plone site, we use a Diazo rule:"
msgstr ""

#: ../principles.rst:105
msgid "Now, if we visit any page of our site, we will see our block."
msgstr ""

#: ../principles.rst:109
msgid "If we want to display it only in the _News_ folder, we would use ``css:if-content``:"
msgstr ""

#: ../principles.rst:118
msgid "See the `Diazo <http://docs.diazo.org/en/latest/>`_ documentation for more details."
msgstr ""

#: ../principles.rst:120
msgid "But unfortunately, when we click on our \"Do something\" button, we are redirected to the original bare block."
msgstr ""

#: ../principles.rst:123
msgid "To remain in the Plone page, we need to activate the ``ajax`` target in ``rapido/myapp/blocks/simpleblock.yaml``:"
msgstr ""

#: ../principles.rst:135
msgid "Now, when we click our button, the rapido block is reloaded inside the Plone page."
msgstr ""

#: ../principles.rst:138
msgid "Instead of adding a block to an existing Plone view, we might need to provide a new rendering, mapped to a specific URL. We can do that by declaring our block as a Plone view in its YAML file:"
msgstr ""

#: ../principles.rst:148
msgid "And then we call ``@@my-custom-view`` on any content, like:"
msgstr ""

#: ../principles.rst:150
msgid "http://localhost:8080/Plone/news/@@my-custom-view"
msgstr ""

#: ../principles.rst:152
msgid "We can create as many views as we might need (like ``@@subscribe``, ``@@unsubscribe``, ``@@stats``, ...)."
msgstr ""

#: ../principles.rst:156
msgid "Adding a lot of rapido rules in our main ``rules.xml`` is not ideal."
msgstr ""

#: ../principles.rst:158
msgid "We might prefer to create a ``rules.xml`` file in our ``rapido/myapp`` folder, and include it in our main ``rules.xml`` file like this:"
msgstr ""

#: ../principles.rst:166
msgid "Running Python code"
msgstr ""

#: ../principles.rst:168
msgid "Every function in our Python files takes a parameter named ``context``. The context gives access to useful objects:"
msgstr ""

#: ../principles.rst:171
msgid "``context.app``: the current rapido app,"
msgstr ""

#: ../principles.rst:172
msgid "``context.block``: (if executed in a block context) the current block,"
msgstr ""

#: ../principles.rst:173
msgid "``context.record``: (if executed in a record context) the current record,"
msgstr ""

#: ../principles.rst:174
msgid "``context.request``: the current request to rapido (the sub-request, if called from Diazo),"
msgstr ""

#: ../principles.rst:176
msgid "``context.parent_request``: the current page request (when called from Diazo),"
msgstr ""

#: ../principles.rst:177
msgid "``context.portal``: the Plone portal object,"
msgstr ""

#: ../principles.rst:178
msgid "``context.content``: the current Plone content object,"
msgstr ""

#: ../principles.rst:179
msgid "``context.api``: the `Plone API <http://docs.plone.org/external/plone.api/docs/>`_."
msgstr ""

#: ../principles.rst:184
msgid "``context`` is not the usual ``context`` we know in Plone (like ``context`` in a ZPT template or a PythonScript, or ``self.context`` in a BrowserView)."
msgstr ""

#: ../principles.rst:187
msgid "The Plone ``context`` is usually the current content. In Rapido we can obtain it using ``context.content``."
msgstr ""

#: ../principles.rst:190
msgid "This allows us to interact with Plone in many ways, for instance we can run catalog queries, create contents, change workflow status, etc."
msgstr ""

#: ../principles.rst:193
msgid "Nevertheless, it will behave as expected:"
msgstr ""

#: ../principles.rst:195
msgid "the code will always be executed with the current user's access right, so the appropriate Plone access restrictions will be applied,"
msgstr ""

#: ../principles.rst:197
msgid "the CSRF policy will also be applied (for instance, a Plone operation marked as ``PostOnly`` would fail if performed in a GET request)."
msgstr ""

#: ../principles.rst:202
msgid "The code we put in our Python files is compiled and executed in a sandboxed environment (provided by `zope.untrustedpython.interpreter <https://github.com/zopefoundation/zope.untrustedpython/blob/master/docs/narr.rst>`_)."
msgstr ""

#: ../principles.rst:206
msgid "To help us debugging our code, we can add:"
msgstr ""

#: ../principles.rst:212
msgid "in our app ``settings.yaml`` file. Then we can add some log message in our code:"
msgstr ""

#: ../principles.rst:219
msgid "and they will be display in both the server log and the browser's javascript console."
msgstr ""

#: ../principles.rst:223
msgid "Storing and retrieving data"
msgstr ""

#: ../principles.rst:225
msgid "A rapido app provides a builtin storage service, based on `Souper <https://pypi.python.org/pypi/souper>`_."
msgstr ""

#: ../principles.rst:230
msgid "Souper is designed to store (and index) huge amounts of small data (it can easily store survey results, comments, ratings, etc., but it will not be appropriate for attached files for instance)."
msgstr ""

#: ../principles.rst:234
msgid "The Rapido storage service stores **records**, and records contain **items**."
msgstr ""

#: ../principles.rst:236
msgid "There are 3 ways to create records in Rapido:"
msgstr ""

#: ../principles.rst:238
msgid "we can create records by submitting a block: if a block contain some fields elements (like ``TEXT`` or ``NUMBER`` elements for instance), and if the block contains a *save* button (by adding ``{_save}`` in its layout), every time the user enters values in the fields and clicks save, the submitted values will be saved in a new record,"
msgstr ""

#: ../principles.rst:243
msgid "we can create records by code::"
msgstr ""

#: ../principles.rst:247
msgid "we can create records using the Rapido JSON REST API::"
msgstr ""

#: ../principles.rst:253
msgid "or::"
msgstr ""

#: ../principles.rst:259
msgid "The same goes for accessing data:"
msgstr ""

#: ../principles.rst:261
msgid "we can display records by calling their URL, and they will be rendered using the block they were created with::"
msgstr ""

#: ../principles.rst:266
msgid "we can get a record by code:"
msgstr ""

#: ../principles.rst:273
msgid "we can get records using the Rapido JSON REST API::"
msgstr ""

#: ../principles.rst:279
msgid "Integration with Plone"
msgstr ""

#: ../principles.rst:281
msgid "In addition to the Diazo injection of Rapido blocks in our theme, we can also integrate our Rapido developments in Plone using:"
msgstr ""

#: ../principles.rst:284
msgid "Mosaic: Rapido provides a Mosaic tile which enables us to insert a Rapido block in our page layout."
msgstr ""

#: ../principles.rst:287
msgid "Content Rules: Rapido provides a Plone *content rule action* allowing us to call a Python function from a block when a given Plone event happens."
msgstr ""

#: ../principles.rst:290
msgid "`Mockup <http://plone.github.io/mockup/dev/>`_ patterns: the *modal* and the *content loader* patterns can load and display Rapido blocks."
msgstr ""

#: ../principles.rst:293
msgid "See :doc:`reference/display`."
msgstr ""

