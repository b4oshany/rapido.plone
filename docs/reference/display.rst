Displaying Rapido in Plone
==========================

We can see a block by visiting its URL::

    http://localhost:8080/Plone/@@rapido/myapp/block/simpleblock

Similarly for a record::

    http://localhost:8080/Plone/@@rapido/myapp/record/my-record-id

But it is just returning the HTML generated by the block.

To show our blocks in our Plone site, there are 3 possibilities:

Diazo rules
-----------

We can use the `Diazo <http://docs.diazo.org/en/latest/>`_ ``include``
directive to get the Rapido block content and inject it in our pages with
``before``, ``after`` or ``replace`` directives.

Example:

.. code-block:: xml

    <before css:content="#content-core">
        <include css:content="form" href="/@@rapido/myapp/block/simpleblock" />
    </before>

Extra views
-----------

If we do not want to just inject a small piece of HTML in existing pages,
but create a new view for our contents, we can use the Rapido **neutral views**.

Neutral views are obtained by adding ``@@rapido/view/<any-name>`` to a
content URL. It will just return the content's default view (that is why we
call them neutral).

For instance, all those URLs display the same thing::

    http://localhost:8080/Plone/front-page
    http://localhost:8080/Plone/front-page/@@rapido/view/
    http://localhost:8080/Plone/front-page/@@rapido/view/abc
    http://localhost:8080/Plone/front-page/@@rapido/view/123

So we are able to call a content with a URL we control, and that allows us
to create specific Diazo rules for it using the ``if-path`` attribute.

**Hard-coded injection**

.. code-block:: xml
    
    <rules if-path="@@rapido/view/show-report">
        <replace css:content="#content">
            <include css:content="form" href="/@@rapido/stats/block/report" />
        </replace>      
    </rules>

In this example, if we open::

    http://localhost:8080/Plone/@@rapido/view/show-report

we will see our page main content replaced with our ``report`` block.

**Dynamic injection**

We can also display dynamically a Rapido resource specified in the URL. Rapido provides an URL injection pattern which allows to refer to the parent request in our Diazo rule.

The pattern is: ``$<integer>``, where the integer specifies the starting position after ``@@rapido`` to get the path to inject.

For instance:

    - with ``http://localhost:8080/Plone/@@rapido/view/show-report/5654654``, ``$3`` gets the part of the path starting at the 3rd element after ``@@rapido``, which is: ``5654654``,
    - with ``http://localhost:8080/Plone/@@rapido/view/show-report/myapp/record/5654654``, ``$3`` gets the part of the path starting at the 3rd element after ``@@rapido``, which is: ``myapp/record/5654654``,
    - with ``http://localhost:8080/Plone/@@rapido/view/show-report/myapp/record/5654654/edit``, ``$5`` gets the part of the path starting at the 5th element after ``@@rapido``, which is: ``5654654/edit``.

Examples:

.. code-block:: xml

    <rules if-path="@@rapido/view/show-report">
        <replace css:content="#content-core">
            <include css:content="form" href="/@@rapido/$3" />
        </replace>
    </rules>

if we open::

    http://localhost:8080/Plone/@@rapido/view/show-report/myapp/record/my-record-id

we will render ``myapp/record/my-record-id`` in our page main content.

We could also do:

.. code-block:: xml

    <rules if-path="@@rapido/view/show-report">
        <replace css:content="#content-core">
            <include css:content="form" href="/@@rapido/myapp/record/$3" />
        </replace>
    </rules>

if we open::

    http://localhost:8080/Plone/@@rapido/view/show-report/my-record-id

we will get the very same rendering as in our previous example.

Mosaic
------

`Mosaic <http://plone-app-mosaic.s3-website-us-east-1.amazonaws.com/latest/>`_
is a layout editor.

It allows to add and manipulate `tiles` in our content layouts.

Rapido provides a Mosaic tile, so any Rapido block can be added as a tile to
our layouts.

To enable it, we need to install Mosaic and then to import a specific Rapido
Generic Setup profile named "rapido.plone mosaic tile".
